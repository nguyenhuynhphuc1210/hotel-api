<?php

namespace App\Http\Controllers;

use App\Models\Booking;
use App\Models\Room;
use App\Models\Customer;
use App\Models\Service;
use App\Models\BookingService;
use App\Models\Invoice;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class BookingController extends Controller
{
    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ booking (k√®m room + customer + services + invoice)
     */
    public function index()
    {
        $bookings = Booking::with(['room', 'customer', 'services', 'invoice'])
            ->paginate(10);

        return response()->json($bookings);
    }

    /**
     * T·∫°o m·ªõi booking (k√®m d·ªãch v·ª• n·∫øu c√≥, t·ª± ƒë·ªông l∆∞u customer n·∫øu ch∆∞a c√≥)
     */
    public function store(Request $request)
    {
        $request->validate([
            'fullname'       => 'required|string|max:255',
            'phone'          => 'required|string|max:20',
            'email'          => 'required|email',
            'cccd'           => 'required|string|max:20',
            'checkin_date'   => 'required|date',
            'checkout_date'  => 'required|date|after:checkin_date',
            'room_id'        => 'required|exists:rooms,id',
            'services'       => 'nullable|array',
            'services.*.id'  => 'exists:services,id',
            'services.*.quantity' => 'integer|min:1',
        ]);

        // üü¢ Ki·ªÉm tra ph√≤ng
        $room = Room::findOrFail($request->room_id);
        if ($room->status !== 'available') {
            return response()->json(['message' => 'Ph√≤ng hi·ªán kh√¥ng kh·∫£ d·ª•ng!'], 400);
        }

        // üü¢ T√≠nh s·ªë ƒë√™m
        $checkin  = new \DateTime($request->checkin_date);
        $checkout = new \DateTime($request->checkout_date);
        $nights   = $checkin->diff($checkout)->days;
        if ($nights <= 0) {
            return response()->json(['message' => 'Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng!'], 400);
        }

        // üü¢ T√¨m ho·∫∑c t·∫°o kh√°ch h√†ng
        $customer = Customer::firstOrCreate(
            ['email' => $request->email],
            [
                'fullname' => $request->fullname,
                'phone'    => $request->phone,
                'cccd'     => $request->cccd,
            ]
        );

        // üü¢ T√≠nh ti·ªÅn ph√≤ng
        $roomTotal = $room->price * $nights;

        // üü¢ T√≠nh d·ªãch v·ª•
        $servicesTotal = 0;
        $serviceData = [];
        if ($request->has('services')) {
            foreach ($request->services as $s) {
                $service = Service::find($s['id']);
                if ($service) {
                    $total = $service->price * $s['quantity'];
                    $servicesTotal += $total;

                    $serviceData[] = [
                        'booking_id'  => null, // s·∫Ω g√°n sau khi c√≥ booking_id
                        'service_id'  => $s['id'],
                        'quantity'    => $s['quantity'],
                        'total_price' => $total,
                    ];
                }
            }
        }


        $totalAmount = $roomTotal + $servicesTotal;
        $deposit     = $totalAmount * 0.2;
        $remaining   = $totalAmount - $deposit;

        $booking = Booking::create([
            'room_id'         => $room->id,
            'customer_id'     => $customer->id,
            'checkin_date'    => $request->checkin_date,
            'checkout_date'   => $request->checkout_date,
            'total_price'     => $totalAmount,
            'deposit_amount'  => $deposit,
            'remaining_amount' => $remaining,
            'status'          => 'pending',
        ]);

        // C·∫≠p nh·∫≠t l·∫°i booking_id cho serviceData
        foreach ($serviceData as &$sd) {
            $sd['booking_id'] = $booking->id;
            BookingService::create($sd);
        }

        // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
        $room->update(['status' => 'booked']);

        // üü¢ T·∫°o invoice
        $invoice = Invoice::create([
            'booking_id'   => $booking->id,
            'total_amount' => $totalAmount,
            'payment_date' => now(),
            'status'       => 'unpaid',
        ]);

        return response()->json([
            'message' => 'ƒê·∫∑t ph√≤ng th√†nh c√¥ng!',
            'booking' => $booking->load(['room', 'customer', 'services']),
            'invoice' => $invoice,
        ], 201);
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng tin 1 booking
     */
    public function show(Booking $booking)
    {
        return response()->json(
            $booking->load(['room', 'customer', 'services', 'invoice'])
        );
    }

    /**
     * C·∫≠p nh·∫≠t booking (t√≠nh l·∫°i s·ªë ƒë√™m, ti·ªÅn ph√≤ng, invoice)
     */
    public function update(Request $request, Booking $booking)
    {
        $request->validate([
            'room_id'       => 'sometimes|exists:rooms,id',
            'customer_id'   => 'sometimes|exists:customers,id',
            'checkin_date'  => 'sometimes|date',
            'checkout_date' => 'sometimes|date|after:checkin_date',
            'status'        => 'sometimes|string|max:50',
        ]);

        $room = $request->has('room_id')
            ? Room::findOrFail($request->room_id)
            : $booking->room;

        // N·∫øu c√≥ thay ƒë·ªïi ng√†y th√¨ t√≠nh l·∫°i s·ªë ƒë√™m v√† ti·ªÅn ph√≤ng
        $roomTotal = $booking->total_price;
        if ($request->has('checkin_date') || $request->has('checkout_date')) {
            $checkin  = new \DateTime($request->checkin_date ?? $booking->checkin_date);
            $checkout = new \DateTime($request->checkout_date ?? $booking->checkout_date);
            $nights   = $checkin->diff($checkout)->days;

            if ($nights <= 0) {
                return response()->json(['message' => 'Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng!'], 400);
            }

            $roomTotal = $room->price * $nights;
        }

        // T·ªïng d·ªãch v·ª•
        $servicesTotal = $booking->services->sum('pivot.total_price');
        $totalAmount   = $roomTotal + $servicesTotal;
        $deposit       = $totalAmount * 0.2;
        $remaining     = $totalAmount - $deposit;

        // C·∫≠p nh·∫≠t booking
        $booking->update([
            'room_id'         => $request->room_id ?? $booking->room_id,
            'customer_id'     => $request->customer_id ?? $booking->customer_id,
            'checkin_date'    => $request->checkin_date ?? $booking->checkin_date,
            'checkout_date'   => $request->checkout_date ?? $booking->checkout_date,
            'total_price'     => $totalAmount,
            'deposit_amount'  => $deposit,
            'remaining_amount' => $remaining,
            'status'          => $request->status ?? $booking->status,
        ]);

        // C·∫≠p nh·∫≠t invoice
        if ($booking->invoice) {
            $booking->invoice->update([
                'total_amount' => $totalAmount,
            ]);
        }

        return response()->json($booking->load(['room', 'customer', 'services', 'invoice']));
    }

    /**
     * X√≥a booking (tr·∫£ ph√≤ng v·ªÅ available)
     */
    public function destroy(Booking $booking)
    {
        if ($booking->room) {
            $booking->room->update(['status' => 'available']);
        }

        $booking->services()->detach();
        if ($booking->invoice) {
            $booking->invoice->delete();
        }

        $booking->delete();

        return response()->json(null, 204);
    }

    public function myBookings()
    {
        // L·∫•y user hi·ªán t·∫°i
        $user = Auth::user();

        // Ki·ªÉm tra user c√≥ li√™n k·∫øt v·ªõi customer kh√¥ng
        $customer = $user->customer;
        if (!$customer) {
            return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng!'], 404);
        }

        // L·∫•y t·∫•t c·∫£ booking c·ªßa customer k√®m room, services, invoice
        $bookings = $customer->bookings()
            ->with(['room', 'services', 'invoice'])
            ->get();

        return response()->json($bookings);
    }

    public function cancelBooking(Booking $booking)
    {
        if ($booking->status === 'cancelled') {
            return response()->json(['message' => 'Booking ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥!'], 400);
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking
        $booking->update(['status' => 'cancelled']);

        // Tr·∫£ l·∫°i ph√≤ng v·ªÅ tr·∫°ng th√°i available
        if ($booking->room) {
            $booking->room->update(['status' => 'available']);
        }

        // C·∫≠p nh·∫≠t invoice n·∫øu mu·ªën
        if ($booking->invoice) {
            $booking->invoice->update(['status' => 'cancelled']);
        }

        return response()->json([
            'message' => 'Booking ƒë√£ ƒë∆∞·ª£c h·ªßy!',
            'booking' => $booking->load(['room', 'services', 'invoice'])
        ]);
    }

    public function confirm($id)
    {
        $booking = Booking::findOrFail($id);
        $booking->status = 'confirmed';
        $booking->save();

        // C·∫≠p nh·∫≠t ph√≤ng t∆∞∆°ng ·ª©ng sang tr·∫°ng th√°i 'booked'
        $booking->room->update(['status' => 'booked']);

        return response()->json(['message' => 'Booking confirmed successfully']);
    }

    public function myBookingDetail($id)
    {
        // L·∫•y user hi·ªán t·∫°i
        $user = Auth::user();

        // Ki·ªÉm tra user c√≥ li√™n k·∫øt v·ªõi customer kh√¥ng
        $customer = $user->customer;
        if (!$customer) {
            return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng!'], 404);
        }

        // L·∫•y booking theo id, thu·ªôc customer hi·ªán t·∫°i
        $booking = $customer->bookings()
            ->with(['room', 'services', 'invoice', 'customer'])
            ->find($id);

        if (!$booking) {
            return response()->json(['message' => 'Booking kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc b·∫°n!'], 404);
        }

        return response()->json($booking);
    }

    public function allBookings()
    {
        $bookings = Booking::with(['room', 'customer', 'services', 'invoice'])
            ->orderByDesc('id')
            ->get();

        return response()->json($bookings);
    }
}
